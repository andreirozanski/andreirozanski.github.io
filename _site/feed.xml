<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-08-26T13:29:52+02:00</updated><id>/feed.xml</id><title type="html">Andrei Rozanski</title><subtitle>Bioinformatics and Linux Notes</subtitle><entry><title type="html">Pandas : compare - Checking differences between DataFrames</title><link href="/2020/08/26/Pandas-compare-checking-differences-between-dataframes.html" rel="alternate" type="text/html" title="Pandas : compare - Checking differences between DataFrames" /><published>2020-08-26T00:00:00+02:00</published><updated>2020-08-26T00:00:00+02:00</updated><id>/2020/08/26/Pandas-compare-checking-differences-between-dataframes</id><content type="html" xml:base="/2020/08/26/Pandas-compare-checking-differences-between-dataframes.html">&lt;p&gt;When comparing DataFrames, &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.compare.html&quot;&gt;compare&lt;/a&gt; is here to help.&lt;/p&gt;

&lt;p&gt;Imagine you have two different methods and they have the same output structure and you want to check the differences in results by comparing tables.&lt;/p&gt;

&lt;p&gt;Lets create a dataframe 1:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import pandas as pd
import numpy as np

# Lets create two dataframes

df1 = pd.DataFrame(np.array([[101, 102, 103], 
	[201, 202, 203], 
	[301, 302, 303]]), columns=['Value1', 'Value2', 'Value3'], index=['A1',&quot;A2&quot;,&quot;A3&quot;])

df1

	Value1	Value2	Value3
A1	101	102	103
A2	201	202	203
A3	301	302	303

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and dataframe 2:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df2 = pd.DataFrame(np.array([[101, 102.5, 103], 
	[201, 202, 203], 
	[301, 304, 303]]), columns=['Value1', 'Value2', 'Value3'],index=['A1',&quot;A2&quot;,&quot;A3&quot;])

df2

	Value1	Value2	Value3
A1	101.0	102.5	103.0
A2	201.0	202.0	203.0
A3	301.0	304.0	303.0


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, lets use compare:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df1.compare(df2)

		Value2
	self	other
A1	102.0	102.5
A3	302.0	304.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can see that only in Value2, A1 and A3 are different, being &lt;strong&gt;self&lt;/strong&gt; = df1 and &lt;strong&gt;other&lt;/strong&gt; = df2.&lt;/p&gt;

&lt;p&gt;It is also possible to make use of &lt;strong&gt;keep_equal&lt;/strong&gt; and &lt;strong&gt;keep_shape&lt;/strong&gt; arguments to change the way results are displayed:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;keep_shape - &quot;If true, all rows and columns are kept. Otherwise, only the ones with different values are kept.&quot;

keep_equal - &quot;If true, the result keeps values that are equal. Otherwise, equal values are shown as NaNs.&quot;


df1.compare(df2,keep_equal=True,keep_shape=True)

     Value1	     Value2	    Value3
   self	other  self	other  self	other
A1	101	101.0	102	102.5	103	103.0
A2	201	201.0	202	202.0	203	203.0
A3	301	301.0	302	304.0	303	303.0


df1.compare(df2,keep_shape=True,keep_equal=False)

	 Value1	    Value2	     Value3
   self	other self	other	self other
A1	NaN	NaN	102.0	102.5	NaN	NaN
A2	NaN	NaN	NaN	NaN	NaN	NaN
A3	NaN	NaN	302.0	304.0	NaN	NaN

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="DataAnalysis" /><summary type="html">When comparing DataFrames, compare is here to help.</summary></entry><entry><title type="html">Pandas : pipe - Tablewise function application</title><link href="/2020/08/26/Pandas-pipe-Tablewise-function-application.html" rel="alternate" type="text/html" title="Pandas : pipe - Tablewise function application" /><published>2020-08-26T00:00:00+02:00</published><updated>2020-08-26T00:00:00+02:00</updated><id>/2020/08/26/Pandas-pipe-Tablewise-function-application</id><content type="html" xml:base="/2020/08/26/Pandas-pipe-Tablewise-function-application.html">&lt;p&gt;&lt;a href=&quot;https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.pipe.html#pandas.DataFrame.pipe&quot;&gt;pipe&lt;/a&gt; is designed to help 
chaining function calls on &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html&quot;&gt;DataFrames&lt;/a&gt; or
&lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html&quot;&gt;Series&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As showcase, lets grab ensembl genomes table and play with that.&lt;/p&gt;

&lt;p&gt;First, import libraries:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# import libraries 

import pandas as pd
import numpy as np

# show full columns

pd.set_option('display.max_colwidth', None)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As an example, lets fetch ensembl genomes table:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# get ensembl genomes table

colnames = [&quot;name&quot;,&quot;species&quot;,&quot;division&quot;,
            &quot;taxonomy_id&quot;,&quot;assembly&quot;,&quot;assembly_accession&quot;,
            &quot;genebuild&quot;,&quot;variation&quot;,&quot;pan_compara&quot;,
            &quot;peptide_compara&quot;,&quot;genome_alignments&quot;,&quot;other_alignments&quot;,
            &quot;core_db&quot;,&quot;species_id&quot;,&quot;&quot;]

df = pd.read_csv(&quot;ftp://ftp.ensemblgenomes.org/pub/current/species.txt&quot;,skiprows=1,sep=&quot;\t&quot;,names = colnames)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lets define a few functions to work with the table:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# filter for EnsemblMetazoa only and get 'species' and 'taxonomy_id' columns

def clean_table(df):
    df = df[df['division']==&quot;EnsemblMetazoa&quot;]
    df = df[['species','taxonomy_id']]
    return(df)



# add a column 'short_name' that displays i.e. H.sapiens for homo_sapiens

def get_shorten_specie_name(df):
    name1 = df['species'].str.replace(&quot;^_&quot;,&quot;&quot;).str[0:1].str.upper()
    name2 = df['species'].str.replace(&quot;^_&quot;,&quot;&quot;).str.split(&quot;_&quot;).str[1]
    df['short_name'] = name1+&quot;.&quot;+name2
    return(df)



# add https link to NCBI taxonomy database

def add_taxon_id_link(df):
    df['taxonomy_id_link'] = &quot;https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=&quot;+df['taxonomy_id'].astype(str)
    return(df)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now lets use pipe to chain clean_table, get_shorten_specie_name, add_taxon_id_link:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df.pipe(clean_table).pipe(get_shorten_specie_name).pipe(add_taxon_id_link)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the first 4 lines of the resulting table:&lt;/p&gt;

&lt;!-- wp:table --&gt;
&lt;figure class=&quot;wp-block-table&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;species&lt;/td&gt;&lt;td&gt;taxonomy_id&lt;/td&gt;&lt;td&gt;short_name&lt;/td&gt;&lt;td&gt;taxonomy_id_link&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;acyrthosiphon_pisum&lt;/td&gt;&lt;td&gt;7029&lt;/td&gt;&lt;td&gt;A.pisum&lt;/td&gt;&lt;td&gt;https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=7029&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;adineta_vaga&lt;/td&gt;&lt;td&gt;104782&lt;/td&gt;&lt;td&gt;A.vaga&lt;/td&gt;&lt;td&gt;https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=104782&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;aedes_aegypti_lvpagwg&lt;/td&gt;&lt;td&gt;7159&lt;/td&gt;&lt;td&gt;A.aegypti&lt;/td&gt;&lt;td&gt;https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=7159&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;aedes_albopictus&lt;/td&gt;&lt;td&gt;7160&lt;/td&gt;&lt;td&gt;A.albopictus&lt;/td&gt;&lt;td&gt;https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=7160&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;!-- /wp:table --&gt;</content><author><name></name></author><category term="DataAnalysis" /><summary type="html">pipe is designed to help chaining function calls on DataFrames or Series.</summary></entry><entry><title type="html">Creating bigPsl track for UCSC genome browser</title><link href="/2020/08/24/creating-bigPsl-track.html" rel="alternate" type="text/html" title="Creating bigPsl track for UCSC genome browser" /><published>2020-08-24T00:00:00+02:00</published><updated>2020-08-24T00:00:00+02:00</updated><id>/2020/08/24/creating-bigPsl-track</id><content type="html" xml:base="/2020/08/24/creating-bigPsl-track.html">&lt;p&gt;Starting point is to have a &lt;a href=&quot;https://genome.ucsc.edu/FAQ/FAQformat.html#format2&quot;&gt;psl&lt;/a&gt; file.&lt;/p&gt;

&lt;p&gt;Its also needed to have in your path &lt;a href=&quot;http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/pslToBigPsl&quot;&gt;pslToBigPsl&lt;/a&gt;, 
&lt;a href=&quot;http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/bedToBigBed&quot;&gt;bedToBigBed&lt;/a&gt;, &lt;a href=&quot;https://genome.ucsc.edu/goldenPath/help/examples/bigPsl.as&quot;&gt;bigPsl.as&lt;/a&gt; and 
chrom.sizes file.&lt;/p&gt;

&lt;p&gt;The Makefile to automatize it is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;SHELL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/bin/bash
.ONESHELL:

&lt;span class=&quot;nv&quot;&gt;PSL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;wildcard &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.psl&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
TXT:&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;addsuffix .txt, &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;basename&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;PSL&lt;span class=&quot;si&quot;&gt;)))&lt;/span&gt;
BB:&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;addsuffix .bb,&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;basename&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;TXT&lt;span class=&quot;si&quot;&gt;)))&lt;/span&gt;

.PHONY: all clear


all: &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;BB&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;


%.txt: %.psl
        pslToBigPsl &lt;span class=&quot;nv&quot;&gt;$&amp;lt;&lt;/span&gt; stdout | &lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-k1&lt;/span&gt;,1 &lt;span class=&quot;nt&quot;&gt;-k2&lt;/span&gt;,2n &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;

%.bb: %.txt
        wget &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; https://genome.ucsc.edu/goldenPath/help/examples/bigPsl.as &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        bedToBigBed &lt;span class=&quot;nt&quot;&gt;-as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;bigPsl.as &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;bed12+13 &lt;span class=&quot;nt&quot;&gt;-tab&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$&amp;lt;&lt;/span&gt; chrom.sizes &lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;

clear:
        &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.txt &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.bb&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A trackDb.ra snippet:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;track FOOBAR
parent foo
shortLabel FOOBAR
longLabel FOOBAR
group genes
priority 4
visibility dense
color 51,153,255
altcolor 0,102,0
searchTable FOOBAR
searchType bigBed
searchMethod prefix
maxWindowToDraw 10000000
colorByStrand 50,50,150 150,50,50
&lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;bigBed 6 +
bigDataUrl /gbdb/foo/bar
spectrum on&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://genome.ucsc.edu/goldenPath/help/bigPsl.html&quot;&gt;UCSC - bigPsl&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="Bioinformatics" /><summary type="html">Starting point is to have a psl file.</summary></entry></feed>